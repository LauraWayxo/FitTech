<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>FitXO PWA</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #EDEBE7; /* New Neutral: Beige */
            color: #5C7C66; /* New Primary: Dark Sage Green */
        }
        .trainer-card-photo {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid #5C7C66; /* New Primary */
            margin-bottom: 1rem;
        }
        .preview-image {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            object-fit: cover;
            border: 2px dashed #5C7C66; /* New Primary */
            margin-top: 1rem;
        }
        .free-badge {
            background-color: #F7E1E5; /* New Secondary: Soft Pink */
            color: #5C7C66; /* New Primary */
            padding: 2px 8px;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: bold;
            display: inline-block;
            margin-left: auto;
        }
        .close-button {
            position: absolute;
            top: 10px;
            right: 10px;
            background: none;
            border: none;
            font-size: 1.5rem;
            color: #7C7C7C;
            cursor: pointer;
            transition: color 0.2s;
        }
        .close-button:hover {
            color: #5C7C66;
        }
    </style>
</head>
<body class="antialiased">
    <!-- Main App Container -->
    <div class="min-h-screen flex flex-col items-center p-4">
        <div class="w-full max-w-4xl bg-[#F5F2EF] rounded-2xl shadow-xl p-6 sm:p-8 space-y-6 sm:space-y-8">
            <!-- Header Section -->
            <header class="flex flex-col items-center text-center">
                <h1 class="text-3xl sm:text-4xl font-extrabold text-[#5C7C66]">FitXO</h1>
                <p class="mt-1 sm:mt-2 text-sm sm:text-base text-[#5C7C66]">Connect with the local fitness community.</p>
                <div class="mt-4 p-2 bg-[#5C7C66] text-[#F5F2EF] rounded-lg text-xs sm:text-sm font-medium hidden" id="userIdDisplay">
                    Your User ID: <span id="userIdSpan"></span>
                </div>
            </header>

            <!-- Landing Page Section (Initially visible) -->
            <section id="landingSection" class="flex flex-col items-center justify-center space-y-6 text-center">
                <h2 class="text-2xl font-bold text-[#333333]">I am a...</h2>
                <div class="flex flex-col sm:flex-row gap-4 w-full max-w-sm">
                    <button id="clientBtn" class="flex-1 bg-[#5C7C66] hover:bg-[#4D6F59] text-[#F5F2EF] font-bold py-3 px-4 rounded-lg transition-colors shadow-md">
                        Client
                    </button>
                    <button id="trainerBtn" class="flex-1 bg-[#F7E1E5] hover:bg-[#F0C9D0] text-[#5C7C66] font-bold py-3 px-4 rounded-lg transition-colors shadow-md">
                        Trainer
                    </button>
                </div>
            </section>

            <!-- Main Application Content (Initially hidden) -->
            <div id="mainContent" class="hidden w-full">
                <!-- Navigation Bar -->
                <nav class="flex justify-around items-center bg-[#EDEBE7] p-2 rounded-xl shadow-inner">
                    <button data-section="trainers" class="flex-1 text-center py-2 px-1 text-sm sm:text-base font-semibold text-[#5C7C66] transition-colors duration-200 ease-in-out border-b-2 border-[#5C7C66]">Trainers</button>
                    <button data-section="events" class="flex-1 text-center py-2 px-1 text-sm sm:text-base font-medium text-[#7C7C7C] hover:text-[#5C7C66] transition-colors duration-200 ease-in-out">Events</button>
                </nav>
                <button id="logoutBtn" class="w-full mt-4 bg-[#7C7C7C] hover:bg-[#6A6A6A] text-[#F5F2EF] font-bold py-2 px-4 rounded-lg transition-colors">
                    Log Out
                </button>

                <!-- Main Content Sections -->
                <main class="space-y-6">
                    <!-- Trainers Section -->
                    <section id="trainersSection" class="active-section space-y-4">
                        <h2 class="text-xl sm:text-2xl font-bold text-[#333333] border-b-2 pb-2">Local Trainers</h2>
                        <div id="trainersList" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <!-- Trainer cards will be dynamically added here -->
                            <div class="bg-[#EDEBE7] p-4 rounded-lg shadow-sm">
                                <h3 class="font-semibold">Example Trainer</h3>
                                <p class="text-sm text-[#5C7C66]">Specialty: Yoga</p>
                                <p class="text-xs text-[#7C7C7C] mt-1">A brief bio goes here.</p>
                            </div>
                        </div>
                        <button id="showAddTrainerForm" class="w-full bg-[#5C7C66] hover:bg-[#4D6F59] text-[#F5F2EF] font-bold py-2 px-4 rounded-lg transition-colors hidden">
                            Add My Profile
                        </button>

                        <!-- Help Section for Trainers -->
                        <div id="helpSection" class="mt-8 p-6 bg-[#EDEBE7] rounded-2xl shadow-inner hidden">
                            <h3 class="text-xl font-bold text-[#5C7C66] mb-2">Trainer Help Center</h3>
                            <p class="text-[#333333]">Need assistance? Here are some common questions and tips for using FitXO as a trainer.</p>
                            <ul class="list-disc list-inside mt-4 text-[#5C7C66] space-y-2">
                                <li>**How do I create a profile?** Click the 'Add My Profile' button above to get started.</li>
                                <li>**How do I add an event?** Navigate to the 'Events' tab and click 'Add an Event'.</li>
                                <li>**Can I edit my profile?** To update your profile, simply submit a new one, and your old profile will be overwritten.</li>
                                <li>**How do I delete an event?** Events cannot be deleted at this time.</li>
                            </ul>
                        </div>
                    </section>

                    <!-- Events Section -->
                    <section id="eventsSection" class="hidden space-y-4">
                        <h2 class="text-xl sm:text-2xl font-bold text-[#333333] border-b-2 pb-2">Upcoming Events</h2>
                        <div class="flex flex-col sm:flex-row gap-4 mb-4 items-end">
                            <div class="flex-1 w-full sm:w-auto">
                                <label for="groupFilter" class="block text-sm font-medium text-[#333333]">Filter by Group</label>
                                <select id="groupFilter" class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                                    <option value="all">All Groups</option>
                                    <option value="Dads">Dads</option>
                                    <option value="Moms">Moms</option>
                                    <option value="Parents">Parents</option>
                                    <option value="Singles">Singles</option>
                                    <option value="Couples">Couples</option>
                                    <option value="Children/Infant">Children/Infant</option>
                                </select>
                            </div>
                            <div class="flex-1 w-full sm:w-auto">
                                <label for="activityFilter" class="block text-sm font-medium text-[#333333]">Filter by Activity</label>
                                <select id="activityFilter" class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                                    <option value="all">All Activities</option>
                                    <option value="HIIT">HIIT</option>
                                    <option value="Cardio">Cardio</option>
                                    <option value="Barre">Barre</option>
                                    <option value="Yoga">Yoga</option>
                                    <option value="CrossFit">CrossFit</option>
                            </select>
                            </div>
                            <button id="clearFiltersBtn" class="w-full sm:w-auto bg-[#EDEBE7] hover:bg-[#E0E0DB] text-[#5C7C66] font-bold py-2 px-4 rounded-lg transition-colors">
                                Clear Filters
                            </button>
                        </div>
                        <div id="eventsList" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                            <!-- Event cards will be dynamically added here -->
                            <div class="bg-[#EDEBE7] p-4 rounded-lg shadow-sm">
                                <h3 class="font-semibold">Example Event</h3>
                                <p class="text-sm text-[#5C7C66]">Location: City Park</p>
                                <p class="text-xs text-[#7C7C7C] mt-1">Date: May 15, 2025</p>
                            </div>
                        </div>
                        <div class="flex flex-col sm:flex-row gap-4">
                            <button id="showAddEventForm" class="flex-1 bg-[#5C7C66] hover:bg-[#4D6F59] text-[#F5F2EF] font-bold py-2 px-4 rounded-lg transition-colors hidden">
                                Add an Event
                            </button>
                            <button id="showDateSearchModalBtn" class="flex-1 bg-[#5D335D] hover:bg-[#4A264A] text-[#F5F2EF] font-bold py-2 px-4 rounded-lg transition-colors">
                                Find Events by Date
                            </button>
                        </div>
                    </section>
                </main>
            </div>

            <!-- Loading Spinner -->
            <div id="loadingIndicator" class="flex justify-center items-center py-8">
                <svg class="animate-spin -ml-1 mr-3 h-8 w-8 text-[#5C7C66]" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <span class="text-[#5C7C66]">Loading...</span>
            </div>

            <!-- New Modal for Initial User Profile -->
            <div id="profileModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center p-4 z-50">
                <div class="bg-[#EDEBE7] rounded-xl shadow-2xl p-6 w-full max-w-md relative">
                    <button class="close-button" onclick="document.getElementById('profileModal').classList.add('hidden');">&times;</button>
                    <h3 class="text-xl font-bold mb-4">Create Your Profile</h3>
                    <form id="addProfileForm" class="space-y-4">
                        <div>
                            <label for="profileDisplayName" class="block text-sm font-medium text-[#333333]">Display Name</label>
                            <input type="text" id="profileDisplayName" name="displayName" required class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                        </div>
                        <div>
                            <label for="profileEmail" class="block text-sm font-medium text-[#333333]">Email Address</label>
                            <input type="email" id="profileEmail" name="email" required class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                        </div>
                        <input type="hidden" id="profileRole" name="role">
                        <div class="flex justify-end">
                            <button type="submit" class="px-4 py-2 text-sm font-medium rounded-md text-[#F5F2EF] bg-[#5C7C66] hover:bg-[#4D6F59] transition-colors">Save Profile</button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Modals for adding content -->
            <div id="trainerModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center p-4 z-50">
                <div class="bg-[#EDEBE7] rounded-xl shadow-2xl p-6 w-full max-w-md relative">
                    <button class="close-button" onclick="document.getElementById('trainerModal').classList.add('hidden');">&times;</button>
                    <h3 class="text-xl font-bold mb-4">Add Your Trainer Profile</h3>
                    <form id="addTrainerForm" class="space-y-4">
                        <div>
                            <label for="trainerPhoto" class="block text-sm font-medium text-[#333333]">Profile Photo</label>
                            <input type="file" id="trainerPhotoInput" name="photo" accept="image/*" class="mt-1 block w-full text-sm text-[#7C7C7C] file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-[#F7E1E5] file:text-[#5C7C66] hover:file:bg-[#F0C9D0] transition-colors">
                            <div id="photoPreviewContainer" class="flex justify-center mt-4 hidden">
                                <img id="trainerPhotoPreview" src="" alt="Photo Preview" class="preview-image">
                            </div>
                        </div>
                        <div>
                            <label for="trainerDisplayName" class="block text-sm font-medium text-[#333333]">Display Name</label>
                            <input type="text" id="trainerDisplayName" name="displayName" required class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                        </div>
                        <div>
                            <label for="trainerSpecialty" class="block text-sm font-medium text-[#333333]">Specialty (e.g., Yoga, HIIT)</label>
                            <input type="text" id="trainerSpecialty" name="specialty" required class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                        </div>
                        <div>
                            <label for="trainerBio" class="block text-sm font-medium text-[#333333]">Bio</label>
                            <textarea id="trainerBio" name="bio" rows="3" required class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]"></textarea>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="button" id="cancelAddTrainer" class="px-4 py-2 text-sm font-medium rounded-md text-[#5C7C66] bg-[#F5F2EF] hover:bg-[#EDEBE7] transition-colors">Cancel</button>
                            <button type="submit" class="px-4 py-2 text-sm font-medium rounded-md text-[#F5F2EF] bg-[#5C7C66] hover:bg-[#4D6F59] transition-colors">Add Profile</button>
                        </div>
                    </form>
                </div>
            </div>

            <div id="eventModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center p-4 z-50">
                <div class="bg-[#EDEBE7] rounded-xl shadow-2xl p-6 w-full max-w-md relative">
                    <button class="close-button" onclick="document.getElementById('eventModal').classList.add('hidden');">&times;</button>
                    <h3 class="text-xl font-bold mb-4">Add a Fitness Event</h3>
                    <form id="addEventForm" class="space-y-4">
                        <div>
                            <label for="eventName" class="block text-sm font-medium text-[#333333]">Event Name</label>
                            <input type="text" id="eventName" name="name" required class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                        </div>
                        <div>
                            <label for="eventDate" class="block text-sm font-medium text-[#333333]">Date</label>
                            <input type="date" id="eventDate" name="date" required class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                        </div>
                        <div>
                            <label for="eventLocation" class="block text-sm font-medium text-[#333333]">Location</label>
                            <input type="text" id="eventLocation" name="location" required class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                        </div>
                        <div>
                            <label for="eventGroup" class="block text-sm font-medium text-[#333333]">Group</label>
                            <select id="eventGroup" name="group" class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                                <option value="General">General</option>
                                <option value="Dads">Dads</option>
                                <option value="Moms">Moms</option>
                                <option value="Parents">Parents</option>
                                <option value="Singles">Singles</option>
                                <option value="Couples">Couples</option>
                                <option value="Children/Infant">Children/Infant</option>
                            </select>
                        </div>
                        <div>
                            <label for="eventActivity" class="block text-sm font-medium text-[#333333]">Activity</label>
                            <select id="eventActivity" name="activity" class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]">
                                <option value="General">General</option>
                                <option value="HIIT">HIIT</option>
                                <option value="Cardio">Cardio</option>
                                <option value="Barre">Barre</option>
                                <option value="Yoga">Yoga</option>
                                <option value="CrossFit">CrossFit</option>
                            </select>
                        </div>
                        <div>
                            <label for="eventDescription" class="block text-sm font-medium text-[#333333]">Description</label>
                            <textarea id="eventDescription" name="description" rows="3" required class="mt-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5C7C66] focus:ring-[#5C7C66]"></textarea>
                        </div>
                        <div class="flex justify-end space-x-2">
                            <button type="button" id="cancelAddEvent" class="px-4 py-2 text-sm font-medium rounded-md text-[#5C7C66] bg-[#F5F2EF] hover:bg-[#EDEBE7] transition-colors">Cancel</button>
                            <button type="submit" class="px-4 py-2 text-sm font-medium rounded-md text-[#F5F2EF] bg-[#5C7C66] hover:bg-[#4D6F59] transition-colors">Add Event</button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- New Modal for Date Search -->
            <div id="dateSearchModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden flex items-center justify-center p-4 z-50">
                <div class="bg-[#EDEBE7] rounded-xl shadow-2xl p-6 w-full max-w-lg max-h-[80vh] flex flex-col relative">
                    <button class="close-button" onclick="document.getElementById('dateSearchModal').classList.add('hidden');">&times;</button>
                    <h3 class="text-xl font-bold mb-4">Find Events by Date</h3>
                    <form id="dateSearchForm" class="flex flex-col sm:flex-row gap-4 mb-4">
                        <input type="date" id="searchDate" name="searchDate" required class="flex-1 block w-full rounded-md border-[#7C7C7C] shadow-sm focus:border-[#5D335D] focus:ring-[#5D335D]">
                        <button type="submit" class="bg-[#5D335D] hover:bg-[#4A264A] text-[#F5F2EF] font-bold py-2 px-4 rounded-lg transition-colors">Search</button>
                    </form>
                    <div id="dateSearchResults" class="overflow-y-auto space-y-4 p-2">
                        <!-- Filtered event cards will be dynamically added here -->
                        <p class="text-center text-[#7C7C7C] italic">Select a date to see events.</p>
                    </div>
                    <div class="flex justify-end mt-4">
                        <button type="button" id="cancelDateSearch" class="px-4 py-2 text-sm font-medium rounded-md text-[#5C7C66] bg-[#F5F2EF] hover:bg-[#EDEBE7] transition-colors">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Toast/Notification Message Box -->
    <div id="messageBox" class="fixed bottom-4 right-4 p-4 bg-[#5C7C66] text-[#F5F2EF] rounded-lg shadow-lg hidden z-50">
        <p id="messageText"></p>
    </div>

    <!-- Firebase Scripts -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, where, setLogLevel, getDocs, updateDoc, increment, doc, getDoc, setDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // IMPORTANT: Use the provided global variables for Firebase initialization.
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : null;
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        setLogLevel('debug'); // Enable debug logging for Firestore

        let app, db, auth, userId = null;
        let isAuthReady = false;
        let allEvents = [];
        let trainerPhotoBase64 = null;
        let hasTrainerProfile = false;
        let userRole = null; // 'client' or 'trainer'

        const navButtons = document.querySelectorAll('nav button');
        const sections = {
            trainers: document.getElementById('trainersSection'),
            events: document.getElementById('eventsSection')
        };
        const trainersList = document.getElementById('trainersList');
        const eventsList = document.getElementById('eventsList');
        const showAddTrainerBtn = document.getElementById('showAddTrainerForm');
        const showAddEventBtn = document.getElementById('showAddEventForm');
        const showDateSearchModalBtn = document.getElementById('showDateSearchModalBtn');
        const trainerModal = document.getElementById('trainerModal');
        const eventModal = document.getElementById('eventModal');
        const dateSearchModal = document.getElementById('dateSearchModal');
        const profileModal = document.getElementById('profileModal');
        const addProfileForm = document.getElementById('addProfileForm');
        const addTrainerForm = document.getElementById('addTrainerForm');
        const addEventForm = document.getElementById('addEventForm');
        const dateSearchForm = document.getElementById('dateSearchForm');
        const dateSearchResults = document.getElementById('dateSearchResults');
        const cancelTrainerBtn = document.getElementById('cancelAddTrainer');
        const cancelEventBtn = document.getElementById('cancelAddEvent');
        const cancelDateSearchBtn = document.getElementById('cancelDateSearch');
        const messageBox = document.getElementById('messageBox');
        const messageText = document.getElementById('messageText');
        const userIdDisplay = document.getElementById('userIdDisplay');
        const userIdSpan = document.getElementById('userIdSpan');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const logoutBtn = document.getElementById('logoutBtn');

        const landingSection = document.getElementById('landingSection');
        const mainContent = document.getElementById('mainContent');
        const clientBtn = document.getElementById('clientBtn');
        const trainerBtn = document.getElementById('trainerBtn');
        
        const trainerPhotoInput = document.getElementById('trainerPhotoInput');
        const trainerPhotoPreview = document.getElementById('trainerPhotoPreview');
        const photoPreviewContainer = document.getElementById('photoPreviewContainer');
        const groupFilter = document.getElementById('groupFilter');
        const activityFilter = document.getElementById('activityFilter');
        const clearFiltersBtn = document.getElementById('clearFiltersBtn');
        const profileRoleInput = document.getElementById('profileRole');
        const helpSection = document.getElementById('helpSection');

        const showSection = (sectionId) => {
            Object.values(sections).forEach(section => section.classList.add('hidden'));
            sections[sectionId].classList.remove('hidden');

            navButtons.forEach(button => {
                if (button.dataset.section === sectionId) {
                    button.classList.add('text-[#5C7C66]', 'border-b-2', 'border-[#5C7C66]');
                    button.classList.remove('text-[#7C7C7C]', 'font-medium');
                } else {
                    button.classList.remove('text-[#5C7C66]', 'border-b-2', 'border-[#5C7C66]');
                    button.classList.add('text-[#7C7C7C]', 'font-medium');
                }
            });
        };

        const showMessage = (message) => {
            messageText.textContent = message;
            messageBox.classList.remove('hidden');
            setTimeout(() => {
                messageBox.classList.add('hidden');
            }, 3000);
        };

        const renderTrainer = (trainer) => {
            const card = document.createElement('div');
            card.className = 'bg-[#EDEBE7] p-4 rounded-xl shadow-sm hover:shadow-md transition-shadow flex flex-col items-center text-center';
            const photoHtml = trainer.photo
                ? `<img src="${trainer.photo}" alt="${trainer.displayName}'s photo" class="trainer-card-photo">`
                : `<svg class="trainer-card-photo" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path d="M12 2.25c5.403 0 10.748.868 12.079 4.316.924 2.441-.303 5.406-2.585 7.85-2.158 2.3-4.992 4.41-7.85 5.759l-.004.002-.127.06-.007.003-.021.01a14.249 14.249 0 01-5.115 1.543l-.014.002a21.412 21.412 0 01-1.258.118l-.208.016A.75.75 0 013 20.25v-1.875c0-1.036.721-1.928 1.745-2.071a15.869 15.869 0 015.827-2.023c.365-.05.7-.109 1.01-.177.47-.1.933-.205 1.385-.324a.75.75 0 00.155-.548l-.135-1.124a4.25 4.25 0 00-4.18-3.904 1.5 1.5 0 113-1.042a.75.75 0 001.446-.351c-.188-.853-.78-1.587-1.637-2.016A6.974 6.974 0 0112 2.25z"></path></svg>`;
            card.innerHTML = `
                ${photoHtml}
                <h3 class="text-lg font-semibold text-[#333333]">${trainer.displayName}</h3>
                <p class="text-sm text-[#5C7C66]">${trainer.specialty}</p>
                <p class="mt-1 text-sm text-[#5C7C66]">Events Hosted: <strong>${trainer.hostedEvents || 0}</strong></p>
                <p class="mt-2 text-sm text-[#7C7C7C]">${trainer.bio}</p>
            `;
            trainersList.appendChild(card);
        };

        const renderEvents = (eventsToRender, container) => {
            container.innerHTML = '';
            if (eventsToRender.length === 0) {
                container.innerHTML = '<p class="text-center text-[#7C7C7C] italic">No events found.</p>';
                return;
            }
            eventsToRender.forEach(event => {
                const card = document.createElement('div');
                card.className = 'bg-[#EDEBE7] p-4 rounded-xl shadow-sm hover:shadow-md transition-shadow relative';
                card.innerHTML = `
                    <div class="flex items-center justify-between">
                        <h3 class="text-lg font-semibold text-[#333333]">${event.name}</h3>
                        <span class="free-badge">FREE</span>
                    </div>
                    <p class="text-sm text-[#5C7C66] mt-2"><strong>Group:</strong> ${event.group || 'N/A'}</p>
                    <p class="text-sm text-[#5C7C66]"><strong>Activity:</strong> ${event.activity || 'N/A'}</p>
                    <p class="text-sm text-[#5C7C66]"><strong>Location:</strong> ${event.location}</p>
                    <p class="text-xs text-[#7C7C7C] mt-1">Date: ${new Date(event.date).toLocaleDateString()}</p>
                `;
                container.appendChild(card);
            });
        };

        const filterAndRenderEvents = () => {
            const selectedGroup = groupFilter.value;
            const selectedActivity = activityFilter.value;
            
            const filteredEvents = allEvents.filter(event => {
                const matchesGroup = selectedGroup === 'all' || event.group === selectedGroup;
                const matchesActivity = selectedActivity === 'all' || event.activity === selectedActivity;
                return matchesGroup && matchesActivity;
            });

            renderEvents(filteredEvents, eventsList);
        };

        const checkAndStartApp = async () => {
            loadingIndicator.classList.remove('hidden');
            try {
                const userDocRef = doc(db, `artifacts/${appId}/public/data/users`, userId);
                const userDocSnap = await getDoc(userDocRef);

                if (userDocSnap.exists()) {
                    // Profile exists, show main content directly
                    landingSection.classList.add('hidden');
                    mainContent.classList.remove('hidden');
                } else {
                    // Profile does not exist, show profile creation modal
                    profileRoleInput.value = userRole;
                    profileModal.classList.remove('hidden');
                    landingSection.classList.add('hidden');
                }
            } catch (error) {
                console.error("Error checking user profile: ", error);
                showMessage("Failed to load user profile. Please try again.");
                loadingIndicator.classList.add('hidden');
            }
        };

        const startApp = async () => {
             // Hide landing page and show main content
            loadingIndicator.classList.remove('hidden');

            try {
                if (firebaseConfig) {
                    app = initializeApp(firebaseConfig);
                    auth = getAuth(app);
                    db = getFirestore(app);

                    onAuthStateChanged(auth, async (user) => {
                        if (user) {
                            userId = user.uid;
                        } else {
                            userId = crypto.randomUUID();
                            await signInAnonymously(auth);
                        }
                        isAuthReady = true;
                        userIdDisplay.classList.remove('hidden');
                        userIdSpan.textContent = userId;
                        
                        checkAndStartApp();

                        // Show/hide help section based on role
                        if (userRole === 'trainer') {
                             helpSection.classList.remove('hidden');
                        } else {
                             helpSection.classList.add('hidden');
                        }
                        
                        // Start listening to collections only after auth is ready
                        const trainersRef = collection(db, `artifacts/${appId}/public/data/trainers`);
                        const eventsRef = collection(db, `artifacts/${appId}/public/data/events`);

                        onSnapshot(trainersRef, (snapshot) => {
                            trainersList.innerHTML = '';
                            hasTrainerProfile = false;
                            snapshot.forEach(doc => {
                                const trainer = doc.data();
                                if (trainer.addedBy === userId) {
                                    hasTrainerProfile = true;
                                }
                                renderTrainer({id: doc.id, ...trainer});
                            });

                            if (userRole === 'trainer') {
                                if (hasTrainerProfile) {
                                    showAddTrainerBtn.classList.add('hidden');
                                } else {
                                    showAddTrainerBtn.classList.remove('hidden');
                                }
                                showAddEventBtn.classList.remove('hidden');
                            } else { // client
                                showAddTrainerBtn.classList.add('hidden');
                                showAddEventBtn.classList.add('hidden');
                            }
                            
                            loadingIndicator.classList.add('hidden');
                        }, (error) => {
                            console.error("Error fetching trainers: ", error);
                            showMessage("Error fetching trainers.");
                            loadingIndicator.classList.add('hidden');
                        });

                        onSnapshot(eventsRef, (snapshot) => {
                            allEvents = [];
                            snapshot.forEach(doc => {
                                allEvents.push(doc.data());
                            });
                            filterAndRenderEvents(); // Initial render with filters
                             loadingIndicator.classList.add('hidden');
                        }, (error) => {
                            console.error("Error fetching events: ", error);
                            showMessage("Error fetching events.");
                             loadingIndicator.classList.add('hidden');
                        });
                    });

                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    }
                } else {
                    showMessage("Firebase config not found. Please provide it.");
                    console.error("Firebase config not found. The app cannot connect to the database.");
                    loadingIndicator.classList.add('hidden');
                }
            } catch (error) {
                console.error("Firebase initialization failed:", error);
                showMessage("Failed to initialize the app. Please check the console for details.");
                loadingIndicator.classList.add('hidden');
            }
        };

        const handleLogout = async () => {
            try {
                await signOut(auth);
                showMessage("Successfully logged out!");
            } catch (error) {
                console.error("Logout failed:", error);
                showMessage("Logout failed. Please try again.");
            }
            // Reset UI state after logout
            landingSection.classList.remove('hidden');
            mainContent.classList.add('hidden');
            userIdDisplay.classList.add('hidden');
            userRole = null;
        };

        window.onload = () => {
            loadingIndicator.classList.add('hidden');
        };

        // Event listeners for the new landing page buttons
        clientBtn.addEventListener('click', () => {
            userRole = 'client';
            startApp();
        });

        trainerBtn.addEventListener('click', () => {
            userRole = 'trainer';
            startApp();
        });

        // Event listener for the new logout button
        logoutBtn.addEventListener('click', handleLogout);

        // Navigation and Modal Logic
        navButtons.forEach(button => {
            button.addEventListener('click', () => {
                showSection(button.dataset.section);
            });
        });

        showAddTrainerBtn.addEventListener('click', () => {
            trainerPhotoPreview.src = '';
            photoPreviewContainer.classList.add('hidden');
            addTrainerForm.reset();
            trainerModal.classList.remove('hidden');
        });
        cancelTrainerBtn.addEventListener('click', () => trainerModal.classList.add('hidden'));
        
        showAddEventBtn.addEventListener('click', () => eventModal.classList.remove('hidden'));
        cancelEventBtn.addEventListener('click', () => eventModal.classList.add('hidden'));

        showDateSearchModalBtn.addEventListener('click', () => dateSearchModal.classList.remove('hidden'));
        cancelDateSearchBtn.addEventListener('click', () => dateSearchModal.classList.add('hidden'));
        
        // Filter event listeners
        groupFilter.addEventListener('change', filterAndRenderEvents);
        activityFilter.addEventListener('change', filterAndRenderEvents);
        clearFiltersBtn.addEventListener('click', () => {
            groupFilter.value = 'all';
            activityFilter.value = 'all';
            filterAndRenderEvents();
        });

        // Handle image file input for trainer profile
        trainerPhotoInput.addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = (event) => {
                    trainerPhotoBase64 = event.target.result;
                    trainerPhotoPreview.src = trainerPhotoBase64;
                    photoPreviewContainer.classList.remove('hidden');
                };
                reader.onerror = (error) => {
                    console.error("Error reading file:", error);
                    showMessage("Error loading photo.");
                };
                reader.readAsDataURL(file);
            }
        });
        
        // Handle new profile form submission
        addProfileForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!isAuthReady) {
                showMessage("Authentication is not ready. Please wait.");
                return;
            }
            try {
                const formData = new FormData(addProfileForm);
                const profileData = Object.fromEntries(formData.entries());
                
                // Check for unique email address
                const usersRef = collection(db, `artifacts/${appId}/public/data/users`);
                const emailQuery = query(usersRef, where("email", "==", profileData.email));
                const querySnapshot = await getDocs(emailQuery);

                if (!querySnapshot.empty) {
                    showMessage("This email is already in use. Please use a different one.");
                    return;
                }
                
                await setDoc(doc(db, `artifacts/${appId}/public/data/users`, userId), {
                    ...profileData,
                    createdAt: new Date(),
                    lastLogin: new Date()
                });

                showMessage("Profile created successfully!");
                profileModal.classList.add('hidden');
                mainContent.classList.remove('hidden');
            } catch (error) {
                console.error("Error creating user profile: ", error);
                showMessage("Failed to create profile. Please check the console.");
            }
        });

        addTrainerForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!isAuthReady) {
                showMessage("Authentication is not ready. Please wait.");
                return;
            }
            try {
                const formData = new FormData(addTrainerForm);
                const trainerData = Object.fromEntries(formData.entries());
                trainerData.photo = trainerPhotoBase64 || null; 
                trainerData.hostedEvents = 0; // Initialize hostedEvents count
                await addDoc(collection(db, `artifacts/${appId}/public/data/trainers`), {
                    ...trainerData,
                    addedBy: userId,
                    createdAt: new Date()
                });
                showMessage("Trainer profile added successfully!");
                addTrainerForm.reset();
                trainerPhotoBase64 = null;
                trainerModal.classList.add('hidden');
            } catch (error) {
                console.error("Error adding trainer: ", error);
                showMessage("Failed to add trainer profile.");
            }
        });

        addEventForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            if (!isAuthReady) {
                showMessage("Authentication is not ready. Please wait.");
                return;
            }
            try {
                const formData = new FormData(addEventForm);
                const eventData = Object.fromEntries(formData.entries());

                // Find the trainer profile to update the event count
                const trainersRef = collection(db, `artifacts/${appId}/public/data/trainers`);
                const q = query(trainersRef, where("addedBy", "==", userId));
                const querySnapshot = await getDocs(q);

                if (!querySnapshot.empty) {
                    const trainerDoc = querySnapshot.docs[0];
                    await updateDoc(trainerDoc.ref, {
                        hostedEvents: increment(1)
                    });
                } else {
                    console.warn("No matching trainer profile found for this user. Event count will not be updated.");
                }

                await addDoc(collection(db, `artifacts/${appId}/public/data/events`), {
                    ...eventData,
                    addedBy: userId,
                    createdAt: new Date()
                });
                
                showMessage("Event added successfully!");
                addEventForm.reset();
                eventModal.classList.add('hidden');
            } catch (error) {
                console.error("Error adding event: ", error);
                showMessage("Failed to add event.");
            }
        });

        dateSearchForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const searchDate = document.getElementById('searchDate').value;
            if (!searchDate) {
                dateSearchResults.innerHTML = '<p class="text-center text-[#7C7C7C] italic">Please select a date.</p>';
                return;
            }

            const filteredEvents = allEvents.filter(event => {
                const eventDate = new Date(event.date);
                const searchDateObj = new Date(searchDate);
                return eventDate.toDateString() === searchDateObj.toDateString();
            });

            renderEvents(filteredEvents, dateSearchResults);
        });
    </script>
</body>
</html>
